<Queue, 큐>
- 먼저 들어간 요소가 먼저 나오고, 마지막에 들어간 요소가 마지막에 나오는 FIFO(First-in-First-out, 선입선출) 구조
- 순서가 보장된 처리를 가지고 있는 '사용자가 몰리는 서버', 편의점 등
- 큐는 기본적으로 데이터를 삽입하는 enqueue와 데이터를 빼내는 dequeue가 존재
- 먼저 데이터를 삽입하게 되면 rear(끝)쪽으로 데이터가 들어가며 쌓임
- 데이터를 제거할 때는 front(앞)쪽에 있는 데이터를 빼내게 됨
- front는 가장 먼저 들어온 데이터의 index, rear는 가장 마지막에 들어온 데이터의 index

* 주요 연산: push() == add() == offer(), pop() == poll(), peek()
- 언어마다 다름

* 2가지 구현 방법: 배열 이용, 연결 리스트 이용
- 배열로 구현 시 크기가 제한되고 빈 공간을 사용하려면 모든 자료를 꺼내거나 자료를 한 칸씩 옮겨야 한다는 문제 존재
- 또, 배열로 구현 시 많은 수의 enqueue 및 dequeue 작업을 하는 경우 어느 시점에서 큐가 비어있더라도 자료를 삽입하지 못하는 문제 발생
- 연결 리스트로 구현할 경우 rear를 신경 쓰지 않고 구현하는 반면, 배열로 구현하는 경우 rear가 굉장히 중요함

* 장점: 데이터의 순서 보장, 대기열 관리에 유용
* 단점: 중간 항목 접근 어려움, 크기 제한, 선형 탐색 시간