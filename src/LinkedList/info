1. Singly LinkedList (단일 연결 리스트)
- 노드(객체)를 연결하여 리스트처럼 만든 컬렉션 (배열 x)
- 데이터의 중간 삽입, 삭제가 빈번할 경우 빠른 성능을 보장
- 그러나, 임의의 요소에 대한 접근 성능은 좋지 않음
- 특히 Singly LinkedList는 단방향 연결 리스트이기 때문에, 만일 리스트의 끝요소를 탐색하려면
처음(head)부터 끝(tail)까지 순회하며 탐색해야 하기 때문에 굉장히 효율이 떨어짐 (이를 개선한 것이 Doubly LinkedList)
- 데이터의 저장 순서가 유지되고, 중복을 허용함
- 인덱스가 없기에 랜덤 액세스를 할 수 없음
- 따라서 N개의 노드를 가지고 있는 연결 리스트에서 노드를 검색할 때 시간복잡도는 O(N)

2. Doubly LinkedList (이중 연결 리스트)
- 노드(객체)를 연결하여 리스트처럼 만든 컬렉션 (배열 x)
- 노드들을 연결하여 목록을 구성하기에 용량(capacity) 개념이 존재 x -> 무한정 저장 가능
- 데이터의 저장 순서가 유지되고, 중복 허용
- ArrayList 처럼 인덱스로 요소를 접근하지만, 배열이 아니기 때문에 별도로 탐색시간이 걸려 임의이 요소에 대한 접근 성능 좋지 x
- 데이터의 중간 삽입, 삭제가 빈번할 경우 빠른 성능 보장
- 하지만 노드에 들어있는 게 많은 만큼 메모리의 사용량이 많아짐
- Singly LinkedList는 단방향 연결 리스트이기 때문에 만일 리스트의 끝요소를 탐색하려면 처음(head)부터 끝(tail)까지 순회하며 탐색해야 하지만,
Doubly LinkedList는 'prev 포인트'를 가지고 있기 때문에 한번에 마지막 요소의 탐색이 가능함
- 위의 이유로, 실무에서는 기본적으로 Doubly LinkedList를 사용

3. Circular Doubly LinkedList (원형 리스트)
- 기존 Doubly LinkedList의 첫 번째 노드와 마지막 노드를 연결 시켜, 원형 리스트 처럼 구성한 자료 구조
- 이러한 순환 구조는 티비 채널을 순회 하는 것 처럼 데이터를 순차적 방식으로 처리하다 마지막 요소를 만나면 처음 요소로 되돌아가는 애플리케이션에서 사용
- 단일 연결 리스트를 원형으로 연결한 Circular Singly LinkedList도 있음