<Stack, 스택>
- 선형 자료 구조(Linear List)
- 가장 먼저 들어간 요소가 가장 마지막에 나오고, 가장 마지막에 들어간 요소가 가장 먼저 나오는 LIFO(Last In First Out, 후입선출)
- 직전의 데이터를 빠르게 갖고 올 수 있음
- 한 쪽이 막힌 형태
- undo(뒤로 가기)/redo(실행 취소), 웹 브라우저의 뒤로/앞으로 가기, 컴퓨터 구조의 스택 메모리, 재귀 함수 등에 구현
- 균형성 검사를 할 수 있어서 수식, 괄호 등의 검사에서도 쓰임
- 자바의 Stack 클래스는 Vector 클래스를 상속 받기에 Thread-safe 하다는 특징을 가짐
- 그러나 Vector 클래스는 자원이 끊긴 구식 클래스이므로, 직접 내부 배열을 이용해 한땀 한땀 스택을 만들어 사용하는 방법도 좋지만
더 좋은 방법은 자바의 대표적인 가변 배열 클래스인 java.util.ArrayList를 이용하여, 리스트의 메소드 위임을 통해 push, pop
동작만 별도로 추가해주는 식으로 보다 간단하게 스택 클래스를 만들 수 있음

* 주요 연산: push(), pop()
- pop()은 가장 마지막에 들어온 요소를 삭제하는 연산
- push()는 요소를 맨 앞에 삽입하는 연산

* 2가지 구현 방법: 배열 이용, 리스트 이용
- 배열 이용 시 장점: 구현이 간단, 별도로 메모리를 동적으로 할당하지 않기에 속도가 빠름
- 배열 이용 시 단점: 크기가 고정됨

- 리스트 이용 시 장점: 크기가 가변적
- 리스트 이용 시 단점: 삽입/삭제 시 메모리를 동적으로 할당/해제 하기 때문에 속도가 느림