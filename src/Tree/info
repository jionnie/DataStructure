<Tree, 트리>
- 노드들이 나무 가지처럼 연결된 비선형, 계층적 자료구조
- 리스트, 스택, 큐는 이전 데이터와 다음 데이터 간의 순서가 존재했지만 트리 구조 자체의 특성상 순서 중요 x (순서 정보를 가지도록 구현할 수는 있음)
- 그래프(Graph)의 일종, 상하 개념 계층의 구조적 속성을 표현
- 파일, 폴더의 계층 구조에 많이 쓰임
- 상위 노드를 부모 노드, 부모 노드에서 파생된 노드를 자식 노드라 함
- 같은 부모를 가진 노드를 형제 관계(sibling)에 있다고 하며, 자식 수를 차수로 나타내어 degree라고도 함

* 관련 용어
- Node: 트리 구조에서 각 구성요소를 의미하는 단위
- Root Node: 트리의 시작 노드로, 부모가 없는 최상위 노드 (트리는 최대 1개의 Root Node를 가질 수 있음)
- Edge: 노드와 노드 간의 연결을 하는 선
- Path: 특정 노드에서 노드까지의 경로 (순서), 한 번 지나쳤던 경로를 다시 지나는 것은 허락 x
- Terminal Node(Leaf Node): 자식 노드가 존재하지 않는, 즉 밑으로 또 다른 노드가 연결 되어 있지 않은 노드
- Sub-Tree: 전체 큰 트리 구조 안의 작은 트리 구조, 트리의 재귀적인 특성을 보여줌
- Depth: 루트 노드로부터 얼마나 떨어져 있는 지를 뜻하는 단위, 루트 노드의 바로 아래 노드는 Depth 1, 루트 노드는 Depth 0
- Level: 트리 구조에서 같은 위치, 즉 같은 Depth를 가지는 노드들을 한 레벨로 나타내는 단위, 루트 노드가 기준이고 이 위치를 Level 0으로 함
- Height: 트리에서 가장 최고 레벨, 가장 깊은(Deep) 층, 어떤 노드에서 리프 노드까지 가장 긴 경로의 간선 수
- Order(계수): 부모 노드가 가질 수 있는 최대 자식 수, Order 3이라고 하면 부모 노드는 최대 3개의 자식 노드를 가질 수 있음

* 트리 종류
- 편향 트리(경사 트리, skew Tree): 모든 노드들이 자식 노드를 하나씩만 가지는 트리
- 이진 트리(Binary Tree): 각 노드의 차수(자식 노드)가 2 이하인 트리 구조
- ***이진 탐색 트리(Binary Search Tree, BST): 순서화 된 이진 트리
노드의 왼쪽 자식은 부모의 값 보다 항상 작은 값을 가져야 하고, 노드의 오른쪽 자식은 부모의 값보다 항상 큰 값을 가져야 함
- m원 탐색 트리(m-way Search Tree): 최대 m개의 서브 트리를 갖는 탐색 트리, BST의 확장된 형태로 높이를 줄이기 위해 사용
- 균형 트리(Balanced Tree, height-balanced m-way tree,B-Tree): m원 탐색 트리에서 높이 균형을 유지하는 트리

* 사용 예
- 계층적인 데이터 저장(파일, 폴더, ...)
- 효율적인 검색 속도(삽입, 삭제, 검색)
- ***힙(Heap): 트리를 이용한 구조, Heap 정렬은 우선순위 큐에서 사용하는 정렬
- 데이터베이스 인덱싱을 구현하는데 트리 사용(B-Tree, B+Tree, AVL-Tree)
- Trie 자료구조: 사전을 저장하는데 사용되는 특별한 종류의 트리